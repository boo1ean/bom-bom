// Generated by CoffeeScript 1.3.3
(function() {
  var Ball, Game, Plank, Render, Scene, Wall, b2AABB, b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2Fixture, b2FixtureDef, b2MassData, b2MouseJointDef, b2PolygonShape, b2Vec2, b2World;

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2AABB = Box2D.Collision.b2AABB;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2World = Box2D.Dynamics.b2World;

  b2MassData = Box2D.Collision.Shapes.b2MassData;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef;

  Wall = (function() {

    function Wall(world, x, y, w, h) {
      var def, fix;
      fix = new b2FixtureDef;
      fix.density = 1;
      fix.friction = 0.5;
      fix.restitution = 0.5;
      fix.shape = new b2PolygonShape;
      def.shape.SetAsBox(w, h);
      def = new b2BodyDef;
      def.type = b2Body.b2_staticBody;
      def.position.Set(x, y);
      this.body = world.CreateBody(def);
      this.body.CreateFixture(fix);
    }

    return Wall;

  })();

  Ball = (function() {

    function Ball(world, radius) {
      var ball;
      b2BodyDef.type = b2Body.b2_dynamicBody;
      b2BodyDef.position.x = 0;
      b2BodyDef.position.y = 0;
      b2FixtureDef.shape = new b2CircleShape(radius);
      b2FixtureDef.restitution = 1;
      b2FixtureDef.friction = 0;
      ball = world.CreateBody(bodyDef);
      ball.CreateFixture(b2FixtureDef);
      ball.ApplyImpulse(new b2Vec2(100, 100), new b2Vec2(0, 0));
    }

    return Ball;

  })();

  Plank = (function() {

    function Plank(world, x, y, h, w) {
      b2FixtureDef.shape.SetAsBox(w, h);
      b2FixtureDef.shape = new b2PolygonShape;
      b2BodyDef.position.x = x;
      b2BodyDef.position.y = y;
      b2FixtureDef.restitution = 0.5;
      b2FixtureDef.friction = 0.5;
      this.plank = world.CreateBody(b2BodyDef);
      this.plank.CreateFixture(b2FixtureDef);
    }

    Plank.prototype.accelerate = function(acceleration) {
      return this.plank.ApplyImpulse(new b2Vec2(acceleration.x, acceleration.y), this.plank.GetWorldCenter());
    };

    return Plank;

  })();

  Scene = (function() {

    function Scene(options) {
      var gravity, wall_width;
      this.options = options;
      gravity = new b2Vec2(0, 0);
      this.world = new b2World(gravity, true);
      wall_width = 0.1;
      new Wall(this.world, 0, 0, options.width, wall_width);
      new Wall(this.world, 0, 0, wall_width, options.height);
      new Wall(this.world, options.width, 0, wall_width, options.height);
      new Wall(this.world, 0, options.height, options.height, wall_width);
      this.ball = new Ball(this.world, options.ball_radius);
      this.planks = {};
    }

    Scene.prototype.add = function(name) {
      return this.planks[name] = new Plank(this.world, options.width / 2, options.height / 2, options.height / 3, options.width / 20);
    };

    Scene.prototype.accelerate = function(name, acceleration) {
      return this.planks[name].accelerate(acceleration);
    };

    Scene.prototype.update = function() {
      return this.world.Step(1 / 60, 12, 10);
    };

    return Scene;

  })();

  Render = (function() {

    function Render(options) {
      var canvas, context, draw;
      canvas = document.getElementById(options.canvas_id);
      context = canvas.getContext("2d");
      draw = new b2DebugDraw;
      draw.SetSprite(context);
      draw.SetDrawScale(30.0);
      draw.SetFillAlpha(0.5);
      draw.SetLineThickness(1.0);
      draw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
      options.world.SetDebugDraw(draw);
    }

    return Render;

  })();

  Game = (function() {

    function Game(server) {
      var _this = this;
      this.scene = new Scene({
        width: 800,
        height: 600
      });
      this.render = new Render({
        canvas_id: "canvas",
        world: this.scene.world
      });
      this.socket = io.connect(server);
      this.socket.on("client", function(name) {
        return _this.scene.add(name);
      });
      this.socket.on("acceleration", function(data) {
        return _this.scene.accelerate(data.name, data.acceleration);
      });
      setInterval(this.scene.update, 1000 / 60);
    }

    return Game;

  })();

}).call(this);
